name: Build Root Image (f2fs)

on:
  schedule:
    - cron: "0 2 1 * *"
  workflow_dispatch:

jobs:
  # ------------------------------------------------------------
  # Job 1: Build RootFS Directory (inside Arch Container)
  # ------------------------------------------------------------
  build:
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
    outputs:
      new_tag: ${{ steps.tag_info.outputs.NEW_TAG }}
      release_date: ${{ steps.tag_info.outputs.RELEASE_DATE }}
    env:
      GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install build dependencies
        run: |
          pacman -Sy --noconfirm base base-devel arch-install-scripts git

      - name: Build rootfs directory
        run: |
          chmod +x build.sh
          ./build.sh

      - name: Calculate release date and tag name
        id: tag_info
        run: |
          RELEASE_DATE=$(date +'%Y-%m-%d')
          TIMESTAMP=$(date +%s)
          NEW_TAG="${RELEASE_DATE}-${TIMESTAMP}"
          echo "RELEASE_DATE=$RELEASE_DATE" >> $GITHUB_OUTPUT
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "Calculated tag: $NEW_TAG"

      - name: Archive rootfs directory to bypass upload restrictions
        run: |
          tar -czf out/rootfs.tar.gz -C out/rootfs .

      - name: Upload rootfs archive artifact
        uses: actions/upload-artifact@v4
        with:
          name: rootfs-archive
          path: out/rootfs.tar.gz
          retention-days: 7

  # ------------------------------------------------------------
  # Job 2: Create F2FS System Image (on Host Runner)
  # ------------------------------------------------------------
  create-image:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download rootfs archive artifact
        uses: actions/download-artifact@v4
        with:
          name: rootfs-archive
          path: out/

      - name: Install image creation tools
        run: |
          sudo apt-get update
          sudo apt-get install -y parted f2fs-tools rsync gpg

      - name: Setup GPG on Host
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" > /tmp/gpg.key
          gpg --batch --import /tmp/gpg.key
          rm -f /tmp/gpg.key

      - name: Extract rootfs directory
        run: |
          mkdir -p out/rootfs
          tar -xzf out/rootfs.tar.gz -C out/rootfs

      - name: Create F2FS Root Image
        env:
          ROOTFS_DIR: out/rootfs
          IMAGE_FILE: out/fireflyos-f2fs.img
          IMAGE_SIZE_MB: 8192
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
        run: |
          set -euo pipefail

          IMAGE_FILE="$IMAGE_FILE"
          ROOTFS_DIR="$ROOTFS_DIR"
          MOUNT_POINT=$(mktemp -d)

          echo "==> Rootfs size preview:"
          du -sh "$ROOTFS_DIR"

          echo "==> Creating image file..."
          truncate -s "${IMAGE_SIZE_MB}M" "$IMAGE_FILE"

          echo "==> Partitioning image..."
          sudo parted -s "$IMAGE_FILE" mklabel msdos
          sudo parted -s "$IMAGE_FILE" mkpart primary 1MiB 100%

          echo "==> Setting up loop device..."
          LOOP_DEV=$(sudo losetup -f --show -P "$IMAGE_FILE")
          echo "-> 镜像已关联到 $LOOP_DEV"
          sudo partprobe "$LOOP_DEV"
          sleep 2
          PART_DEV="${LOOP_DEV}p1"

          echo "==> Formatting partition as F2FS..."
          sudo mkfs.f2fs -f -l ROOTFS "$PART_DEV"

          echo "==> Mounting filesystem..."
          sudo mount "$PART_DEV" "$MOUNT_POINT"

          echo "==> Copying rootfs contents..."
          sudo rsync -aHAX --delete "$ROOTFS_DIR/" "$MOUNT_POINT/"

          echo "==> Cleaning filesystem (fstrim)..."
          sudo fstrim -v "$MOUNT_POINT" || true

          echo "==> Unmounting and detaching loop..."
          sudo umount "$MOUNT_POINT"
          sudo losetup -d "$LOOP_DEV"
          rm -rf "$MOUNT_POINT"

          echo "==> Signing image..."
          gpg --detach-sign --armor --local-user "$GPG_KEY_ID" -o "${IMAGE_FILE}.sig" "$IMAGE_FILE"

          echo "✅ Final F2FS image created:"
          ls -lh "$IMAGE_FILE"

      - name: Upload final F2FS image
        uses: actions/upload-artifact@v4
        with:
          name: final-f2fs-image
          path: |
            out/fireflyos-f2fs.img
            out/fireflyos-f2fs.img.sig
          retention-days: 7

  # ------------------------------------------------------------
  # Job 3: Release to GitHub
  # ------------------------------------------------------------
  release:
    runs-on: ubuntu-latest
    needs: create-image
    permissions:
      contents: write
    steps:
      - name: Checkout code (for tagging)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download final F2FS image artifact
        uses: actions/download-artifact@v4
        with:
          name: final-f2fs-image
          path: out/

      - name: Compress image before upload
        run: |
          xz -T0 -9 out/fireflyos-f2fs.img

      - name: Calculate release date and tag name
        id: tag_info
        run: |
          RELEASE_DATE=$(date +'%Y-%m-%d')
          TIMESTAMP=$(date +%s)
          NEW_TAG="${RELEASE_DATE}-${TIMESTAMP}"
          echo "RELEASE_DATE=$RELEASE_DATE" >> $GITHUB_OUTPUT
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "✅ Calculated tag: $NEW_TAG"

      - name: Create and Push Git Tag
        id: create_tag
        env:
          NEW_TAG: ${{ steps.tag_info.outputs.NEW_TAG }}
          RELEASE_DATE: ${{ steps.tag_info.outputs.RELEASE_DATE }}
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          REMOTE_URL="https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"
          git remote set-url origin "$REMOTE_URL"

          if git ls-remote --tags origin | grep -q "refs/tags/$NEW_TAG$"; then
            echo "⚠️ Tag $NEW_TAG already exists. Skipping."
            echo "tag_created=false" >> $GITHUB_OUTPUT
          else
            git tag -a "$NEW_TAG" -m "Monthly automated F2FS root image for $RELEASE_DATE"
            git push origin "$NEW_TAG"
            echo "✅ Tag $NEW_TAG created."
            echo "tag_created=true" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        if: steps.create_tag.outputs.tag_created == 'true'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            out/fireflyos-f2fs.img.xz
            out/fireflyos-f2fs.img.sig
          tag_name: ${{ steps.tag_info.outputs.NEW_TAG }}
          name: "${{ steps.tag_info.outputs.NEW_TAG }}"
          body: |
            ## Automated F2FS Root Image Release
            **Release Date:** ${{ steps.tag_info.outputs.RELEASE_DATE }}
            **Tag:** `${{ steps.tag_info.outputs.NEW_TAG }}`

            This image uses the **F2FS filesystem**, optimized for flash-based storage.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
