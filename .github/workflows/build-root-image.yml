name: Build Root Image

on:
  schedule:
    - cron: "0 2 1 * *"
  workflow_dispatch:

jobs:
  # ----------------------------------------------
  # Job 1: Build RootFS (inside Arch container)
  # ----------------------------------------------
  build:
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
      options: --user root
    outputs:
      new_tag: ${{ steps.tag_info.outputs.NEW_TAG }}
      release_date: ${{ steps.tag_info.outputs.RELEASE_DATE }}
    env:
      GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install build dependencies
        run: |
          pacman -Sy --noconfirm base base-devel arch-install-scripts git

      - name: Build rootfs
        run: |
          chmod +x build.sh
          ./build.sh

      - name: Calculate release date and tag
        id: tag_info
        run: |
          RELEASE_DATE=$(date +'%Y-%m-%d')
          TIMESTAMP=$(date +%s)
          NEW_TAG="${RELEASE_DATE}-${TIMESTAMP}"
          echo "RELEASE_DATE=$RELEASE_DATE" >> $GITHUB_OUTPUT
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "Calculated tag: $NEW_TAG"

      - name: Archive rootfs
        run: |
          mkdir -p out
          tar -czf out/rootfs.tar.gz -C out/rootfs .

      - name: Upload rootfs artifact
        uses: actions/upload-artifact@v4
        with:
          name: rootfs-archive
          path: out/rootfs.tar.gz
          retention-days: 7

  # ----------------------------------------------
  # Job 2: Create EXT4 Image (No Partition Table)
  # ----------------------------------------------
  create-image:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download rootfs artifact
        uses: actions/download-artifact@v4
        with:
          name: rootfs-archive
          path: out/

      - name: Install image creation tools
        run: |
          sudo apt-get update
          sudo apt-get install -y e2fsprogs rsync gpg

      - name: Setup GPG
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" > /tmp/gpg.key
          gpg --batch --import /tmp/gpg.key
          rm -f /tmp/gpg.key

      - name: Extract rootfs
        run: |
          mkdir -p out/rootfs
          tar -xzf out/rootfs.tar.gz -C out/rootfs

      - name: Create EXT4 image (No Partition Table)
        env:
          ROOTFS_DIR: out/rootfs
          IMAGE_FILE: out/fireflyos.img
          BASE_SIZE_MB: 8192
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
        run: |
          set -euo pipefail
          ROOTFS_DIR="$ROOTFS_DIR"
          IMAGE_FILE="$IMAGE_FILE"
          MOUNT_POINT=$(mktemp -d)

          echo "==> Calculating required size..."
          ROOTFS_SIZE_BYTES=$(du -sb "$ROOTFS_DIR" | awk '{print $1}')
          ROOTFS_SIZE_MB=$(( (ROOTFS_SIZE_BYTES + 1024*1024 - 1) / (1024*1024) ))
          SAFETY_MARGIN_MB=1024
          TOTAL_SIZE_MB=$(( ROOTFS_SIZE_MB + SAFETY_MARGIN_MB ))
          if [ "$TOTAL_SIZE_MB" -lt "$BASE_SIZE_MB" ]; then
            TOTAL_SIZE_MB=$BASE_SIZE_MB
          fi
          echo "Total image size: ${TOTAL_SIZE_MB} MB"

          echo "==> Creating blank image..."
          truncate -s "${TOTAL_SIZE_MB}M" "$IMAGE_FILE"

          echo "==> Formatting EXT4 filesystem..."
          sudo mkfs.ext4 -F -L ROOTFS "$IMAGE_FILE"
          sudo tune2fs -m 0 "$IMAGE_FILE"

          echo "==> Mounting EXT4 image..."
          sudo mount -o loop "$IMAGE_FILE" "$MOUNT_POINT"

          echo "==> Copying rootfs contents..."
          sudo rsync -aHAX --delete "$ROOTFS_DIR/" "$MOUNT_POINT/"

          echo "==> Sync and unmount..."
          sudo sync
          sudo umount "$MOUNT_POINT"

          echo "==> Filesystem integrity check..."
          sudo e2fsck -f -y "$IMAGE_FILE" || true

          echo "==> Shrinking filesystem to minimal size..."
          sudo resize2fs -M "$IMAGE_FILE"

          echo "==> Final integrity check..."
          sudo e2fsck -f -y "$IMAGE_FILE" || true

          echo "==> Signing image..."
          gpg --batch --yes --detach-sign --armor \
              --local-user "$GPG_KEY_ID" \
              -o "${IMAGE_FILE}.sig" "$IMAGE_FILE"

          echo "✅ EXT4 root image created successfully."
          ls -lh out/

      - name: Upload final image artifact
        uses: actions/upload-artifact@v4
        with:
          name: final-image
          path: |
            out/fireflyos.img
            out/fireflyos.img.sig
          retention-days: 7

  # ----------------------------------------------
  # Job 3: Release Image
  # ----------------------------------------------
  release:
    runs-on: ubuntu-latest
    needs: create-image
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download final image artifact
        uses: actions/download-artifact@v4
        with:
          name: final-image
          path: out/

      - name: Compress image
        run: |
          xz -T0 -9 out/fireflyos.img

      - name: Calculate tag
        id: tag_info
        run: |
          RELEASE_DATE=$(date +'%Y-%m-%d')
          TIMESTAMP=$(date +%s)
          NEW_TAG="${RELEASE_DATE}-${TIMESTAMP}"
          echo "RELEASE_DATE=$RELEASE_DATE" >> $GITHUB_OUTPUT
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "✅ Tag calculated: $NEW_TAG"

      - name: Create Git tag
        id: create_tag
        env:
          NEW_TAG: ${{ steps.tag_info.outputs.NEW_TAG }}
          RELEASE_DATE: ${{ steps.tag_info.outputs.RELEASE_DATE }}
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          REMOTE_URL="https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"
          git remote set-url origin "$REMOTE_URL"

          if git ls-remote --tags origin | grep -q "refs/tags/$NEW_TAG$"; then
            echo "⚠️ Tag $NEW_TAG already exists. Skipping creation."
            echo "tag_created=false" >> $GITHUB_OUTPUT
          else
            echo "🏷️ Creating new tag: $NEW_TAG"
            git tag -a "$NEW_TAG" -m "Automated rootfs release for $RELEASE_DATE"
            git push origin "$NEW_TAG"
            echo "tag_created=true" >> $GITHUB_OUTPUT
          fi

      - name: Publish GitHub release
        if: steps.create_tag.outputs.tag_created == 'true'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            out/fireflyos.img.xz
            out/fireflyos.img.sig
          tag_name: ${{ steps.tag_info.outputs.NEW_TAG }}
          name: "RootFS EXT4 Image - ${{ steps.tag_info.outputs.NEW_TAG }}"
          body: |
            ## Automated Monthly RootFS Release
            **Release Date:** ${{ steps.tag_info.outputs.RELEASE_DATE }}
            **Tag:** `${{ steps.tag_info.outputs.NEW_TAG }}`

            This image is a pure EXT4 filesystem with no partition table (GPT/MBR removed).

            ✅ Safe to write directly into a physical partition:
            ```
            sudo dd if=fireflyos.img of=/dev/sda2 bs=4M status=progress conv=fsync
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
