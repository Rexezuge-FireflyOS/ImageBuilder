name: Monthly rootfs build

on:
  schedule:
    - cron: "0 2 1 * *"
  workflow_dispatch:

jobs:
  # ----------------------------------------------
  # Job 1: Build (Runs inside the Arch Container)
  # ----------------------------------------------
  build:
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
    outputs:
      new_tag: ${{ steps.tag_info.outputs.NEW_TAG }}
      release_date: ${{ steps.tag_info.outputs.RELEASE_DATE }}
    env:
      GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install build deps AND Git
        run: |
          pacman -Sy --noconfirm base base-devel arch-install-scripts squashfs-tools git

      - name: Setup GPG
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" > /tmp/gpg.key
          gpg --batch --import /tmp/gpg.key
          rm -f /tmp/gpg.key

      - name: Build rootfs
        env:
          GPG_KEY: ${{ secrets.GPG_KEY }}
        run: |
          chmod +x build.sh
          ./build.sh

      - name: Calculate release date and tag name
        id: tag_info
        run: |
          RELEASE_DATE=$(date +'%Y-%m-%d')
          TIMESTAMP=$(date +%s)
          NEW_TAG="${RELEASE_DATE}-${TIMESTAMP}"
          echo "RELEASE_DATE=$RELEASE_DATE" >> $GITHUB_OUTPUT
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "Calculated tag: $NEW_TAG"

      - name: Upload rootfs artifact
        uses: actions/upload-artifact@v4
        with:
          name: rootfs
          path: out/rootfs.squashfs
          retention-days: 7

  # ----------------------------------------------
  # Job 2: Release (Runs on the Host Runner)
  # ----------------------------------------------
  release:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write 
    steps:
      - name: Checkout code (for git tagging)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download rootfs artifact
        uses: actions/download-artifact@v4
        with:
          name: rootfs
          path: out/

      - name: Create and Push Git Tag
        id: create_tag
        env:
          NEW_TAG: ${{ needs.build.outputs.new_tag }}
          RELEASE_DATE: ${{ needs.build.outputs.release_date }}
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # We need to authenticate the git push using the token
          # This command ensures the git remote is using the GITHUB_TOKEN for authentication
          REMOTE_URL="https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"
          git remote set-url origin $REMOTE_URL

          if git ls-remote --tags origin | grep "refs/tags/$NEW_TAG"; then
            echo "Tag $NEW_TAG already exists. Skipping tag creation."
            echo "tag_created=false" >> $GITHUB_OUTPUT
          else
            git tag -a "$NEW_TAG" -m "Monthly automated release for $RELEASE_DATE"
            git push origin "$NEW_TAG"
            echo "Tag $NEW_TAG created and pushed successfully."
            echo "tag_created=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Create GitHub Release with Artifact
        if: steps.create_tag.outputs.tag_created == 'true'
        uses: softprops/action-gh-release@v2
        with:
          files: out/rootfs.squashfs
          tag_name: ${{ needs.build.outputs.new_tag }}
          name: "${{ needs.build.outputs.new_tag }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
