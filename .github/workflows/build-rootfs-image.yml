name: Monthly rootfs build

on:
  schedule:
    - cron: "0 2 1 * *" # Runs at 02:00 UTC on the 1st of every month
  workflow_dispatch: # Allows manual trigger

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
      # GitHub Actions will mount the host's GITHUB_WORKSPACE to /github/workspace in the container by default.
      # No need for custom options or path here for checkout.
    env:
      GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
    steps:
      # All steps below will run inside the Arch Linux container unless explicitly overridden or new jobs are created.

      # Checkout to the default /github/workspace inside the container
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install build deps AND Git
        # This runs inside the Arch Linux container
        run: |
          pacman -Sy --noconfirm base base-devel arch-install-scripts squashfs-tools git

      - name: Setup GPG
        # This runs inside the Arch Linux container
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" > /tmp/gpg.key
          gpg --batch --import /tmp/gpg.key
          rm -f /tmp/gpg.key

      - name: Build rootfs
        # This runs inside the Arch Linux container
        # The working directory is /github/workspace by default due to 'container' job
        env:
          GPG_KEY: ${{ secrets.GPG_KEY }}
        run: |
          # The 'out' directory will be created relative to /github/workspace
          chmod +x build.sh
          ./build.sh
          # The artifact 'out/rootfs.squashfs' will now be at /github/workspace/out/rootfs.squashfs
          # inside the container, and thus also accessible from the host at $GITHUB_WORKSPACE/out/rootfs.squashfs

      - name: Generate and push monthly release tag
        id: create_tag
        # This runs inside the Arch Linux container
        run: |
          RELEASE_DATE=$(date +'%Y-%m-%d')
          NEW_TAG="monthly-release-${RELEASE_DATE}"

          echo "Attempting to create and push tag: $NEW_TAG"

          git config user.name "GitHub Actions Bot"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          if git rev-parse "$NEW_TAG" >/dev/null 2>&1; then
            echo "Tag $NEW_TAG already exists. Skipping tag creation."
            echo "::set-output name=tag_created::false"
          else
            git tag -a "$NEW_TAG" -m "Monthly automated release for $RELEASE_DATE"
            git push origin "$NEW_TAG"
            echo "Tag $NEW_TAG created and pushed successfully."
            echo "::set-output name=tag_created::true"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # --- IMPORTANT CHANGE HERE ---
      # The 'Upload artifact' and 'Create release' steps will now run on the HOST runner.
      # To do this, we explicitly break out of the container context.

  # Define a new job that depends on 'build' to ensure artifacts are ready
  # This new job will run on the HOST runner (ubuntu-latest)
  release_artifacts:
    runs-on: ubuntu-latest
    needs: build # This job will wait for the 'build' job to complete
    steps:
      # If you need the *code* in this job, you would do another checkout.
      # However, for just uploading an artifact and creating a release,
      # you don't necessarily need the full repo checked out again,
      # as long as the artifact from the 'build' job is uploaded first
      # and then downloaded.

      # Option 1 (Recommended): Download the artifact uploaded by the 'build' job
      - name: Download rootfs artifact
        uses: actions/download-artifact@v4
        with:
          name: rootfs # Name of the artifact uploaded in the 'build' job
          path: out/ # Path to download it to on the host runner

      - name: Create release with artifact
        # This step runs on the host (ubuntu-latest)
        # We need to know if a tag was created in the 'build' job.
        # We access the output of the 'create_tag' step from the 'build' job.
        if: needs.build.outputs.tag_created_output == 'true'
        uses: softprops/action-gh-release@v2
        with:
          files: out/rootfs.squashfs # Path relative to the current working directory on the host
          tag_name: ${{ needs.build.outputs.release_tag_name_output }} # Use the dynamically created tag name
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
