name: Monthly rootfs build

on:
  schedule:
    - cron: "0 2 1 * *"
  workflow_dispatch:

jobs:
  # ----------------------------------------------
  # Job 1: Build (Runs inside the Arch Container)
  # ----------------------------------------------
  build:
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
    outputs:
      new_tag: ${{ steps.tag_info.outputs.NEW_TAG }}
      release_date: ${{ steps.tag_info.outputs.RELEASE_DATE }}
    env:
      GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install build deps
        run: |
          pacman -Sy --noconfirm base base-devel arch-install-scripts git

      - name: Build rootfs directory
        run: |
          chmod +x build.sh
          ./build.sh

      - name: Calculate release date and tag name
        id: tag_info
        run: |
          RELEASE_DATE=$(date +'%Y-%m-%d')
          TIMESTAMP=$(date +%s)
          NEW_TAG="${RELEASE_DATE}-${TIMESTAMP}"
          echo "RELEASE_DATE=$RELEASE_DATE" >> $GITHUB_OUTPUT
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "Calculated tag: $NEW_TAG"

      # --- 新增步骤：将 rootfs 目录打包 ---
      - name: Archive rootfs directory to bypass upload restrictions
        run: |
          # -C out/rootfs: 先切换到该目录再打包，这样压缩包里不会包含 'out/rootfs' 前缀
          # .:      打包当前目录（即 out/rootfs）下的所有内容
          tar -czf out/rootfs.tar.gz -C out/rootfs .
      
      # --- 修改步骤：上传打包后的文件 ---
      - name: Upload rootfs archive artifact
        uses: actions/upload-artifact@v4
        with:
          name: rootfs-archive # 修改产物名称
          path: out/rootfs.tar.gz # 上传 .tar.gz 文件
          retention-days: 7

  # ----------------------------------------------
  # Job 2: Create DD Image (Runs on the Host Runner)
  # ----------------------------------------------
  create-image:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # --- 修改步骤：下载打包后的文件 ---
      - name: Download rootfs archive artifact
        uses: actions/download-artifact@v4
        with:
          name: rootfs-archive # 使用新的产物名称
          path: out/

      - name: Install DD image tools on Host
        run: |
          sudo apt-get update
          sudo apt-get install -y parted e2fsprogs rsync

      - name: Setup GPG on Host
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" > /tmp/gpg.key
          gpg --batch --import /tmp/gpg.key
          rm -f /tmp/gpg.key
      
      # --- 新增步骤：解压 rootfs 目录 ---
      - name: Extract rootfs directory
        run: |
          mkdir -p out/rootfs
          tar -xzf out/rootfs.tar.gz -C out/rootfs

      - name: Create DD Image on Host (using losetup, parted, mkfs)
        env:
          ROOTFS_DIR: out/rootfs
          IMAGE_FILE: out/fireflyos.img
          IMAGE_SIZE_MB: 2048
          GPG_KEY: ${{ secrets.GPG_KEY }}
        run: |
          set -euo pipefail
      
          IMAGE_FILE="$IMAGE_FILE"
          ROOTFS_DIR="$ROOTFS_DIR"
          MOUNT_POINT=$(mktemp -d)
      
          # 创建空镜像文件
          truncate -s "${IMAGE_SIZE_MB}M" "$IMAGE_FILE"
      
          # 使用 parted 创建分区表和一个主分区
          sudo parted -s "$IMAGE_FILE" mklabel msdos
          sudo parted -s "$IMAGE_FILE" mkpart primary ext4 1MiB 100%
      
          # 关联到 loop 设备
          LOOP_DEV=$(sudo losetup -f --show -P "$IMAGE_FILE")
          if [ -z "$LOOP_DEV" ]; then
              echo "错误：无法找到可用的 loop 设备。"
              exit 1
          fi
          echo "-> 镜像已关联到 $LOOP_DEV"
      
          # 确保系统识别分区
          sudo partprobe "$LOOP_DEV"
          sleep 2
      
          # 分区路径
          PART_DEV="${LOOP_DEV}p1"
          if [ ! -e "$PART_DEV" ]; then
              echo "等待分区节点出现..."
              sleep 3
          fi
      
          echo "-> 正在格式化分区 $PART_DEV..."
          sudo mkfs.ext4 -F -L ROOTFS "$PART_DEV"
      
          echo "-> 正在挂载 $PART_DEV 到 $MOUNT_POINT..."
          sudo mount "$PART_DEV" "$MOUNT_POINT"
      
          echo "-> 正在将 rootfs 内容复制到镜像..."
          sudo rsync -a "$ROOTFS_DIR/" "$MOUNT_POINT/"
      
          echo "-> 卸载分区并分离 loop 设备..."
          sudo umount "$MOUNT_POINT"
          sudo losetup -d "$LOOP_DEV"
          rm -rf "$MOUNT_POINT"
      
          echo "==> Signing the image..."
          gpg --detach-sign --armor --local-user "$GPG_KEY" -o "${IMAGE_FILE}.sig" "$IMAGE_FILE"
      
          echo "DD image creation complete: $IMAGE_FILE"

      
      - name: Upload final DD image artifact
        uses: actions/upload-artifact@v4
        with:
          name: final-image
          path: out/fireflyos.img
          retention-days: 7

  # ----------------------------------------------
  # Job 3: Release (Runs on the Host Runner)
  # ----------------------------------------------
  release:
    runs-on: ubuntu-latest
    needs: create-image
    permissions:
      contents: write 
    steps:
      - name: Checkout code (for git tagging)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download final image artifact
        uses: actions/download-artifact@v4
        with:
          name: final-image
          path: out/
        
      - name: Create and Push Git Tag
        id: create_tag
        env:
          NEW_TAG: ${{ needs.build.outputs.new_tag }}
          RELEASE_DATE: ${{ needs.build.outputs.release_date }}
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          REMOTE_URL="https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"
          git remote set-url origin $REMOTE_URL

          if git ls-remote --tags origin | grep "refs/tags/$NEW_TAG"; then
            echo "Tag $NEW_TAG already exists. Skipping tag creation."
            echo "tag_created=false" >> $GITHUB_OUTPUT
          else
            git tag -a "$NEW_TAG" -m "Monthly automated release for $RELEASE_DATE"
            git push origin "$NEW_TAG"
            echo "Tag $NEW_TAG created and pushed successfully."
            echo "tag_created=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Create GitHub Release with Artifact
        if: steps.create_tag.outputs.tag_created == 'true'
        uses: softprops/action-gh-release@v2
        with:
          files: out/fireflyos.img
          tag_name: ${{ needs.build.outputs.new_tag }}
          name: "${{ needs.build.outputs.new_tag }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
